{"version":3,"sources":["components/components/Loader/Loader.tsx","components/components/PersonLink.tsx","components/components/PeopleTable.tsx","api.ts","components/components/Navbar.tsx","App.tsx","index.tsx"],"names":["Loader","className","PersonLink","person","sex","slug","name","to","classNames","PeopleTable","isLoading","people","error","selectedSlug","useParams","findParent","guys","parentName","find","length","map","born","died","fatherName","motherName","mother","father","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Navbar","text","isActive","App","useState","setPeople","setError","setIsLoading","useEffect","catch","finally","role","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.9ec9344a.chunk.js","sourcesContent":["import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../../types/Person';\n\ntype Props = {\n  person: Person,\n};\n\nexport const PersonLink: FC<Props> = ({ person }) => {\n  const { sex, slug, name } = person;\n\n  return (\n    <Link\n      to={`/people/${slug}`}\n      className={classNames({\n        'has-text-danger': sex === 'f',\n      })}\n    >\n      {name}\n    </Link>\n  );\n};\n","import { useParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../../types';\nimport { Loader } from './Loader';\nimport { PersonLink } from './PersonLink';\n\ntype Props = {\n  isLoading: boolean,\n  people: Person[],\n  error: boolean,\n};\n\nexport const PeopleTable: React.FC<Props> = ({ isLoading, people, error }) => {\n  const { slug: selectedSlug } = useParams();\n\n  const findParent = (\n    guys: Person[], parentName: string | null,\n  ) => {\n    return guys.find(({ name }) => name === parentName) || null;\n  };\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading ? <Loader />\n            : (\n              <>\n                {(error === true) && (\n                  <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                    Something went wrong\n                  </p>\n                )}\n\n                {!people.length && (\n                  <p data-cy=\"noPeopleMessage\">\n                    There are no people on the server\n                  </p>\n                )}\n\n                {(error === false) && (\n                  <table\n                    data-cy=\"peopleTable\"\n                    className=\"table\n                      is-striped\n                      is-hoverable\n                      is-narrow is-fullwidth\n                    \"\n                  >\n                    <thead>\n                      <tr>\n                        <th>Name</th>\n                        <th>Sex</th>\n                        <th>Born</th>\n                        <th>Died</th>\n                        <th>Mother</th>\n                        <th>Father</th>\n                      </tr>\n                    </thead>\n\n                    <tbody>\n                      {people.map((person) => {\n                        const {\n                          slug, sex, born, died, fatherName, motherName,\n                        } = person;\n\n                        const mother = findParent(people, motherName);\n                        const father = findParent(people, fatherName);\n\n                        return (\n                          <tr\n                            data-cy=\"person\"\n                            className={classNames(\n                              {\n                                'has-background-warning': selectedSlug === slug,\n                              },\n                            )}\n                          >\n                            <td>\n                              <PersonLink person={person} />\n                            </td>\n\n                            <td>{sex}</td>\n                            <td>{born}</td>\n                            <td>{died}</td>\n                            <td>\n                              {mother ? <PersonLink person={mother} />\n                                : motherName || '-'}\n                            </td>\n                            <td>\n                              {father ? <PersonLink person={father} />\n                                : fatherName || '-'}\n                            </td>\n                          </tr>\n                        );\n                      })}\n                    </tbody>\n                  </table>\n                )}\n              </>\n            )}\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { FC } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n\ntype Props = {\n  to: string,\n  text: string,\n};\n\nexport const Navbar: FC<Props> = ({ to, text }) => {\n  return (\n    <NavLink\n      className={({ isActive }) => classNames('navbar-item', {\n        'has-background-grey-lighter': isActive,\n      })}\n      to={to}\n    >\n      {text}\n    </NavLink>\n  );\n};\n","import { Routes, Route, Navigate } from 'react-router-dom';\nimport './App.scss';\nimport { useEffect, useState } from 'react';\nimport { PeopleTable } from './components/components/PeopleTable';\nimport { getPeople } from './api';\nimport { Person } from './types';\nimport { Navbar } from './components/components/Navbar';\n\nexport const App = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getPeople()\n      .then(setPeople)\n      .catch(() => setError(true))\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      <div data-cy=\"app\">\n        <nav\n          data-cy=\"nav\"\n          className=\"navbar is-fixed-top has-shadow\"\n          role=\"navigation\"\n          aria-label=\"main navigation\"\n        >\n          <div className=\"container\">\n            <div className=\"navbar-brand\">\n\n              <Navbar to=\"/\" text=\"Home\" />\n              <Navbar to=\"/people\" text=\"People\" />\n            </div>\n          </div>\n        </nav>\n\n        <main className=\"section\">\n          <div className=\"container\">\n            <Routes>\n              <Route\n                path=\"/\"\n                element={\n                  <h1 className=\"title\">Home Page</h1>\n                }\n              />\n              <Route\n                path=\"home\"\n                element={\n                  <Navigate to=\"/\" replace />\n                }\n              />\n\n              <Route path=\"people\">\n                <Route\n                  index\n                  element={(\n                    <PeopleTable\n                      isLoading={isLoading}\n                      people={people}\n                      error={error}\n                    />\n                  )}\n                />\n                <Route\n                  path=\":slug\"\n                  element={(\n                    <PeopleTable\n                      isLoading={isLoading}\n                      people={people}\n                      error={error}\n                    />\n                  )}\n                />\n              </Route>\n\n              <Route\n                path=\"*\"\n                element={\n                  <h1 className=\"title\">Page not found</h1>\n                }\n              />\n            </Routes>\n          </div>\n        </main>\n      </div>\n    </>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <HashRouter>\n      <App />\n    </HashRouter>,\n  );\n"],"sourceRoot":""}